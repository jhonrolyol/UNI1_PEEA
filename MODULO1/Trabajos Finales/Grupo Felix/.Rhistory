setwd("C:/Users/GAMER/Desktop/MSUPT/R/EPEII/P1")
knitr::opts_chunk$set(echo = TRUE)
library(foreign)
library(tidyverse)
setwd("C:/Users/GAMER/Desktop/UNI - PEEA/Modulo_I/Trabajos Finales/Grupo Felix")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/PEEA")
setwd("~/737-Modulo34")
setwd("C:\Users\GAMER\Desktop\UNI - PEEA\Modulo_I\Trabajos Finales\Grupo Felix")
setwd("C:/Users/GAMER/Desktop/UNI - PEEA/Modulo_I/Trabajos Finales/Grupo Felix")
df <- read.dta("sumaria-2020.dta",
convert.dates = TRUE, convert.factors = TRUE,
missing.type = FALSE, convert.underscore = FALSE,
warn.missing.labels = TRUE)
view(df)
names(df)
library(tidyverse)
df_pobreza <- df %>% select(pobreza, mieperho, percepho, inghog2d, gashog1d) %>% mutate(pobreza = ifelse(pobreza=="no pobre",0,1))
head(df_pobreza)
view(df_pobreza)
names(df_pobreza)
df_pobreza %>% mutate(pobreza = as.factor(pobreza)) %>% ggplot(aes(mieperho, color = pobreza)) + geom_boxplot()
df_pobreza %>% mutate(pobreza = as.factor(pobreza)) %>% ggplot(aes(inghog2d, color = pobreza, fill= pobreza)) + geom_histogram()
df_pobreza %>% mutate(pobreza = as.factor(pobreza)) %>% ggplot(aes(inghog2d,gashog1d, color = pobreza, fill= pobreza)) + geom_point() + facet_grid(.~pobreza)
fit_lm <- lm(pobreza ~. , data = df_pobreza)
summary(fit_lm)
pred_lm <- predict(fit_lm, type = "response")
summary(pred_lm)
fit_probit <- glm(pobreza ~. , data = df_pobreza,
family = binomial(link = "probit"))
pred_probit <- predict(fit_probit, type = "response")
summary(pred_probit)
fit_logit <- glm(pobreza ~. , data = df_pobreza,
family = binomial(link = "logit"))
summary(fit_logit)
pred_logit <- predict(fit_logit, type = "response")
summary(pred_logit)
fit_logit <- glm(pobreza ~. , data = df_pobreza,
family = binomial(link = "logit"))
summary(fit_logit)
library(ROCR)
pred_logit <- predict(fit_logit, df_pobreza, type = "response")
hist(pred_logit)
pred_logit <- prediction(pred_logit, df_pobreza$pobreza)
eval <- performance(pred_logit, "acc")
plot(eval)
ind_max <-which.max(slot(eval, "y.values")[[1]])
acc_max <- slot(eval, "y.values")[[1]][ind_max]
cut_max <- slot(eval, "x.values")[[1]][ind_max]
paste("El maximo accuracy del modelo es",round(acc_max,3), "con un umbral de corte del", round(cut_max,3), "de probabilidad de ser pobre")
roc_logit <-  performance(pred_logit,"tpr", "fpr")
plot(roc_logit, colorize = TRUE, main = "ROC Curve", ylab = "Sensitivity",
xlab = "1- Specificity")
auc_logit <- performance(pred_logit, "auc")
auc_logit <- unlist(slot(auc_logit, "y.values"))
paste("The final AUC del modelo es", round(auc_logit, 3))
library(MLmetrics)
pred_logit <- predict(fit_logit, df_pobreza, type = "response")
MAE_logit <- MAE(pred_logit, df_pobreza$pobreza)
MAE_probit <- MAE(pred_probit, df_pobreza$pobreza)
MAE_logit
MAE_probit
MSE_logit <- MSE(pred_logit, df_pobreza$pobreza)
MSE_probit <- MSE(pred_probit, df_pobreza$pobreza)
MSE_logit
MSE_probit
knitr::opts_chunk$set(echo = TRUE)
library(foreign)
library(tidyverse)
setwd("C:/Users/GAMER/Desktop/UNI - PEEA/Modulo_I/Trabajos Finales/Grupo Felix")
df <- read.dta("sumaria-2020.dta",
convert.dates = TRUE, convert.factors = TRUE,
missing.type = FALSE, convert.underscore = FALSE,
warn.missing.labels = TRUE)
view(df)
names(df)
library(tidyverse)
df_pobreza <- df %>% select(pobreza, mieperho, percepho, inghog2d, gashog1d) %>% mutate(pobreza = ifelse(pobreza=="no pobre",0,1))
head(df_pobreza)
view(df_pobreza)
names(df_pobreza)
df_pobreza %>% mutate(pobreza = as.factor(pobreza)) %>% ggplot(aes(mieperho, color = pobreza)) + geom_boxplot()
df_pobreza %>% mutate(pobreza = as.factor(pobreza)) %>% ggplot(aes(inghog2d, color = pobreza, fill= pobreza)) + geom_histogram()
df_pobreza %>% mutate(pobreza = as.factor(pobreza)) %>% ggplot(aes(inghog2d,gashog1d, color = pobreza, fill= pobreza)) + geom_point() + facet_grid(.~pobreza)
fit_lm <- lm(pobreza ~. , data = df_pobreza)
summary(fit_lm)
pred_lm <- predict(fit_lm, type = "response")
summary(pred_lm)
fit_probit <- glm(pobreza ~. , data = df_pobreza,
family = binomial(link = "probit"))
summary(fit_probit)
pred_probit <- predict(fit_probit, type = "response")
summary(pred_probit)
fit_logit <- glm(pobreza ~. , data = df_pobreza,
family = binomial(link = "logit"))
summary(fit_logit)
pred_logit <- predict(fit_logit, type = "response")
summary(pred_logit)
fit_logit <- glm(pobreza ~. , data = df_pobreza,
family = binomial(link = "logit"))
summary(fit_logit)
library(ROCR)
pred_logit <- predict(fit_logit, df_pobreza, type = "response")
hist(pred_logit)
pred_logit <- prediction(pred_logit, df_pobreza$pobreza)
eval <- performance(pred_logit, "acc")
plot(eval)
ind_max <-which.max(slot(eval, "y.values")[[1]])
acc_max <- slot(eval, "y.values")[[1]][ind_max]
cut_max <- slot(eval, "x.values")[[1]][ind_max]
paste("El maximo accuracy del modelo es",round(acc_max,3), "con un umbral de corte del", round(cut_max,3), "de probabilidad de ser pobre")
roc_logit <-  performance(pred_logit,"tpr", "fpr")
plot(roc_logit, colorize = TRUE, main = "ROC Curve", ylab = "Sensitivity",
xlab = "1- Specificity")
auc_logit <- performance(pred_logit, "auc")
auc_logit <- unlist(slot(auc_logit, "y.values"))
paste("The final AUC del modelo es", round(auc_logit, 3))
library(MLmetrics)
pred_logit <- predict(fit_logit, df_pobreza, type = "response")
MAE_logit <- MAE(pred_logit, df_pobreza$pobreza)
MAE_probit <- MAE(pred_probit, df_pobreza$pobreza)
MAE_logit
MAE_probit
MSE_logit <- MSE(pred_logit, df_pobreza$pobreza)
MSE_probit <- MSE(pred_probit, df_pobreza$pobreza)
MSE_logit
MSE_probit
